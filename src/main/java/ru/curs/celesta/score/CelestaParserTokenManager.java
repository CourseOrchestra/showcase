/* Generated By:JavaCC: Do not edit this line. CelestaParserTokenManager.java */
package ru.curs.celesta.score;
import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;
import ru.curs.celesta.CelestaException;

/** Token Manager. */
class CelestaParserTokenManager implements CelestaParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffffffffffe0L) != 0L)
         {
            jjmatchedKind = 65;
            return 50;
         }
         if ((active1 & 0x4000L) != 0L)
            return 1;
         if ((active1 & 0x2000L) != 0L)
            return 25;
         if ((active1 & 0x200000L) != 0L)
            return 43;
         return -1;
      case 1:
         if ((active0 & 0x8006c078000a00L) != 0L)
            return 50;
         if ((active0 & 0x1f7ff93f87fff5e0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 50;
         }
         return -1;
      case 2:
         if ((active0 & 0x108180b100000140L) != 0L)
            return 50;
         if ((active0 & 0xf7e790eb7fff4a0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 50;
         }
         return -1;
      case 3:
         if ((active0 & 0x52c010680600000L) != 0L)
            return 50;
         if ((active0 & 0xa527808379ff4a0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 50;
         }
         return -1;
      case 4:
         if ((active0 & 0x42200032084080L) != 0L)
            return 50;
         if ((active0 & 0xa1058080597b420L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
            return 50;
         }
         return -1;
      case 5:
         if ((active0 & 0xa00180805953400L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 50;
         }
         if ((active0 & 0x10400000028020L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0x800100804842000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 50;
         }
         if ((active0 & 0x200080001111400L) != 0L)
            return 50;
         return -1;
      case 7:
         if ((active0 & 0x800000004840000L) != 0L)
            return 50;
         if ((active0 & 0x100800002000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
            return 50;
         }
         return -1;
      case 8:
         if ((active0 & 0x100800002000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
            return 50;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 9;
            return 50;
         }
         if ((active0 & 0x100000002000L) != 0L)
            return 50;
         return -1;
      case 10:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
            return 50;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 74);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         return jjStopAtPos(0, 84);
      case 43:
         return jjStopAtPos(0, 82);
      case 44:
         return jjStopAtPos(0, 75);
      case 45:
         return jjStartNfaWithStates_0(0, 77, 25);
      case 46:
         return jjStartNfaWithStates_0(0, 78, 1);
      case 47:
         return jjStartNfaWithStates_0(0, 85, 43);
      case 59:
         return jjStopAtPos(0, 73);
      case 60:
         return jjStopAtPos(0, 81);
      case 61:
         return jjStopAtPos(0, 79);
      case 62:
         return jjStopAtPos(0, 80);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3e0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1400000000000c00L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000000070000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf80000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000007c000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100300000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe000000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x220000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa02001800081000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000040L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x104d00301030400L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1020202400040000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000080L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000030000100L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8080106000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x8080002208000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 50);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 50);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010000c00000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 50);
         break;
      case 124:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 50);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000004008000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200010000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80080000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4100004a0000L);
      case 77:
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 50);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x20802000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000002200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x41000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 50);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 50);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 50);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008010004a0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000004000L);
      case 88:
      case 120:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 89:
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000018000L);
      case 66:
      case 98:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 50);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000801000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x800500830120080L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 76:
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 50);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 50);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 77:
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x4004000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x82000L);
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 50);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 87:
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 50);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80001001000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 50);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 50);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 80:
      case 112:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 50);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 50);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x100800000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 50);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 50);
         return jjMoveStringLiteralDfa5_0(active0, 0x81000000482a000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 88:
      case 120:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 50);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000804800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000002000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800002000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 50);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 50);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 50);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 50);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 50);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 89:
      case 121:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 50);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 50);
         break;
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 50);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 50);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 35, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 50;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(10);
                  break;
               case 43:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(45, 46);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(20, 21);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(15, 16);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar != 39)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 34 && kind > 69)
                     kind = 69;
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 25:
                  if (curChar != 45)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(0, 5);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 0);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 37:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 42)
                     jjCheckNAddStates(13, 15);
                  break;
               case 40:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 41:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 42:
                  if (curChar == 47 && kind > 70)
                     kind = 70;
                  break;
               case 44:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 42)
                     jjCheckNAddStates(16, 18);
                  break;
               case 47:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 46);
                  break;
               case 48:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 46);
                  break;
               case 49:
                  if (curChar == 47 && kind > 72)
                     kind = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(10);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 5:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(6);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(13);
                  break;
               case 15:
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 18:
                  jjCheckNAddTwoStates(18, 16);
                  break;
               case 20:
                  jjAddStates(21, 22);
                  break;
               case 22:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 96 && kind > 69)
                     kind = 69;
                  break;
               case 26:
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 38:
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
               case 41:
                  jjCheckNAddTwoStates(41, 39);
                  break;
               case 45:
                  jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
               case 48:
                  jjCheckNAddTwoStates(48, 46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(21, 22);
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 9);
                  break;
               case 26:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(41, 39);
                  break;
               case 45:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 0, 30, 31, 32, 35, 43, 44, 23, 24, 30, 31, 32, 39, 40, 42, 
   46, 47, 49, 3, 4, 20, 21, 33, 34, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\73", "\50", "\54", "\51", "\55", "\56", "\75", "\76", 
"\74", "\53", "\174\174", "\52", "\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffffffe1L, 0x3ffe77L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x180L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x180L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[50];
private final int[] jjstateSet = new int[100];
protected char curChar;
/** Constructor. */
public CelestaParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CelestaParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 50; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
